package com.infectedbytes.carbon.controllers;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.controllers.Controller;
import com.badlogic.gdx.controllers.ControllerAdapter;
import com.badlogic.gdx.controllers.ControllerListener;
import com.badlogic.gdx.controllers.Controllers;
import com.badlogic.gdx.utils.Array;
import com.infectedbytes.carbon.controllers.wrapper.ControllerWrapper;
import com.infectedbytes.carbon.controllers.wrapper.FallbackController;
import com.infectedbytes.carbon.controllers.wrapper.IpegaAndroid;
import com.infectedbytes.carbon.controllers.wrapper.IpegaPC;
import com.infectedbytes.carbon.controllers.wrapper.Ouya;
import com.infectedbytes.carbon.controllers.wrapper.WrapperFactory;
import com.infectedbytes.carbon.controllers.wrapper.XBox360;

/**
 * Provides access to connected {@link CarbonController} instances. Query the available controllers via {@link #getControllers()}, add and
 * remove global {@link CarbonControllerListener} instances via {@link #addListener(CarbonControllerListener)} and
 * {@link #removeListener(CarbonControllerListener)}. The listeners will be invoked on the rendering thread. The global listeners will be
 * invoked for all events generated by all controllers. Polling a Controller can be done by invoking one of its getter methods.
 * 
 * @author Henrik
 *
 */
public class CarbonControllers {
	private static Array<WrapperFactory> factories = new Array<WrapperFactory>();
	private static FallbackController fallback;
	private static boolean isInitialized;
	private static Array<CarbonControllerListener> globalListener = new Array<CarbonControllerListener>();
	private static Array<CarbonController> controllers = new Array<CarbonController>();

	private CarbonControllers() {}

	static {
		factories.add(new XBox360());
		factories.add(new IpegaPC());
		factories.add(new IpegaAndroid());
		factories.add(new Ouya());
	}

	private static void init() {
		if (isInitialized) return;
		isInitialized = true;
		fallback = new FallbackController();
		for (Controller c : Controllers.getControllers()) {
			controllers.add(wrap(c));
		}

		Controllers.addListener(new ConnectionListener());
	}

	/**
	 * Returns an array of connected {@link CarbonController} instances. This method should only be called on the rendering thread.
	 * 
	 * @return
	 */
	public static Array<CarbonController> getControllers() {
		init();
		return controllers;
	}

	/**
	 * Add a global {@link CarbonControllerListener} that can react to events from all {@link CarbonController} instances. The listener will
	 * be invoked on the rendering thread.
	 * 
	 * @param listener
	 */
	public static void addListener(CarbonControllerListener listener) {
		init();
		globalListener.add(listener);
		for (CarbonController c : controllers)
			c.addListener(listener);
	}

	/**
	 * Removes a global {@link ControllerListener}. The method must be called on the rendering thread.
	 * 
	 * @param listener
	 */
	public static void removeListener(CarbonControllerListener listener) {
		init();
		globalListener.removeValue(listener, true);
		for (CarbonController c : controllers)
			c.removeListener(listener);
	}

	public static Array<CarbonControllerListener> getListener() {
		return globalListener;
	}

	/**
	 * @return first {@link CarbonController} found or null if no controllers found.
	 */
	public static CarbonController getFirst() {
		init();
		if (controllers.size > 0) return controllers.first();
		return null;
	}

	/**
	 * @return first {@link CarbonController} that is not an instance of {@link FallbackController.Wrapper}. If there are none of these, the
	 *         {@link #getFirst()} method is called
	 */
	public static CarbonController getFirstKnown() {
		init();
		for (CarbonController cc : controllers) {
			if (!(cc instanceof FallbackController.Wrapper)) {
				return cc;
			}
		}
		return getFirst();
	}
	/**
	 * Adds a {@link WrapperFactory}. This method should be called before any call to {@link #addListener(CarbonControllerListener)},
	 * {@link #removeListener(CarbonControllerListener)} or {@link #getControllers()}.
	 * 
	 * @param factory
	 */
	public static void addFactory(WrapperFactory factory) {
		if (factory instanceof FallbackController) {
			Gdx.app.log("CarbonControllers", "DefaultMappings should not be added to CarbonControllers.");
			return;
		}
		factories.removeValue(factory, true);
		factories.add(factory);
	}

	/**
	 * Removes a {@link WrapperFactory}.
	 * 
	 * @param factory
	 */
	public static void removeFactory(WrapperFactory factory) {
		factories.removeValue(factory, true);
	}

	/**
	 * Removes a {@link WrapperFactory}. Mostly used to remove a default factory, like the XBox360 or Ipega classes.
	 * 
	 * @param factory
	 */
	public static <T extends WrapperFactory> void removeFactory(Class<T> factory) {
		WrapperFactory f = null;
		for (WrapperFactory wf : factories) {
			if (wf.getClass() == factory) {
				f = wf;
				break;
			}
		}
		if (f != null)
			factories.removeValue(f, true);
	}

	private static CarbonController wrap(Controller controller) {
		String name = controller.getName();
		for (WrapperFactory factory : factories) {
			if (factory.canWrap(name))
				return factory.wrap(controller);
		}
		return fallback.wrap(controller);
	}

	private static class ConnectionListener extends ControllerAdapter {
		@Override
		public void connected(Controller controller) {
			controllers.add(wrap(controller));
		}
		@Override
		public void disconnected(Controller controller) {
			CarbonController cc = null;
			for (CarbonController c : controllers) {
				if (c instanceof ControllerWrapper) {
					if (((ControllerWrapper)c).getController() == controller) {
						cc = c;
						break;
					}
				}
			}
			if (cc != null) controllers.removeValue(null, true);
		}
	}
}
